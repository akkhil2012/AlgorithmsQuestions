
//https://leetcode.com/problems/path-with-minimum-effort/

public class Solution {
    int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
    public int minimumEffortPath(int[][] heights) {
        PriorityQueue<int[]> queue  = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        int m = heights.length;
        int n = heights[0].length;
        int[][] grid = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                grid[i][j]=Integer.MAX_VALUE;
            }
        }
        grid[0][0] =0;

        queue.add(new int[]{0,0,0});
        int effort = 0;

        while(!queue.isEmpty()){
               int[] current = queue.poll();

               int x = current[1];
               int y = current[2];
               effort = current[0];

               if(effort>grid[x][y])
                   continue;

               if(x==m-1 && y==n-1)
                   return  effort;

               for(int[] dir : dirs){
                   int xn = x + dir[0];
                   int yn = y + dir[1];

                   if(xn>=0 && yn>=0 && xn<m && yn<n){
                       int newEffort = Math.max(effort,Math.abs(heights[xn][yn]-heights[x][y]));
                       if(newEffort<grid[xn][yn]){
                           grid[xn][yn] = newEffort;
                           queue.add(new int[]{newEffort,xn,yn});
                       }
                   }
               }
        }
        return  effort;
    }
}
